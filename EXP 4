  ques 1  Create a program to collect and store all the cards to assist the users in finding all the cards in a given symbol using Collection interface.    

import java.util.*;

class CardCollection {
    private List<String> cards;

    public CardCollection() {
        cards = new ArrayList<>();
    }

    public void addCard(String card) {
        cards.add(card);
    }

    public List<String> getCardsBySymbol(String symbol) {
        List<String> matchedCards = new ArrayList<>();
        for (String card : cards) {
            if (card.contains(symbol)) {
                matchedCards.add(card);
            }
        }
        return matchedCards;
    }

    public void displayCards() {
        System.out.println("All Cards: " + cards);
    }

    public static void main(String[] args) {
        CardCollection collection = new CardCollection();

        collection.addCard("Heart - Ace");
        collection.addCard("Heart - King");
        collection.addCard("Spade - Queen");
        collection.addCard("Diamond - 10");
        collection.addCard("Club - Jack");

        collection.displayCards();

        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter a symbol to search (Heart, Spade, Diamond, Club): ");
        String symbol = scanner.nextLine();

        List<String> foundCards = collection.getCardsBySymbol(symbol);

        if (!foundCards.isEmpty()) {
            System.out.println("Cards found: " + foundCards);
        } else {
            System.out.println("No cards found with symbol: " + symbol);
        }

        scanner.close();
    }
}




QUES 2Develop a ticket booking system with synchronized threads to ensure no double booking of seats. Use thread priorities to simulate VIP bookings being processedÂ first.

import java.util.*;

class TicketBookingSystem {
    private final int totalSeats = 5;
    private final boolean[] seats = new boolean[totalSeats];

    public synchronized boolean bookSeat(int seatNumber, String user) {
        if (seatNumber < 0 || seatNumber >= totalSeats) {
            System.out.println(user + " tried booking an invalid seat.");
            return false;
        }
        if (!seats[seatNumber]) {
            seats[seatNumber] = true;
            System.out.println(user + " successfully booked seat " + seatNumber);
            return true;
        } else {
            System.out.println(user + " tried to book seat " + seatNumber + ", but it's already booked.");
            return false;
        }
    }
}

class BookingThread extends Thread {
    private final TicketBookingSystem system;
    private final String user;
    private final int seatNumber;

    public BookingThread(TicketBookingSystem system, String user, int seatNumber, int priority) {
        this.system = system;
        this.user = user;
        this.seatNumber = seatNumber;
        setPriority(priority);
    }

    @Override
    public void run() {
        system.bookSeat(seatNumber, user);
    }
}

public class TicketBookingApp {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        TicketBookingSystem system = new TicketBookingSystem();
        List<BookingThread> threads = new ArrayList<>();

        System.out.print("Enter number of users: ");
        int userCount = scanner.nextInt();
        scanner.nextLine();

        for (int i = 0; i < userCount; i++) {
            System.out.print("Enter user name: ");
            String userName = scanner.nextLine();
            System.out.print("Enter seat number (0-4): ");
            int seatNumber = scanner.nextInt();
            scanner.nextLine();
            System.out.print("Is this a VIP booking? (yes/no): ");
            String vipStatus = scanner.nextLine();

            int priority = vipStatus.equalsIgnoreCase("yes") ? Thread.MAX_PRIORITY : Thread.NORM_PRIORITY;
            threads.add(new BookingThread(system, userName, seatNumber, priority));
        }

        Collections.shuffle(threads);

        for (BookingThread thread : threads) {
            thread.start();
        }

        for (BookingThread thread : threads) {
            try {
                thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        System.out.println("Booking process completed.");
        scanner.close();
    }
}

